"use client";
import "./globals.css";
// Import Swiper styles
import "swiper/css";
// context
import { Providers } from "./Providers";
import { Inter } from "next/font/google";
import NavbarVertical from "./components/navbar/NavbarVertical";
import { alpha, styled } from "@mui/material/styles";
import { HEADER, NAVBAR } from "@/src/config";

// scroll bar
import "simplebar-react/dist/simplebar.min.css";
import { useState } from "react";
import ToggleNavbar from "./components/navbar/ToggleNavbar";

// ----------------------------------------------------------------------
const MainStayled = styled("main")(({ theme }) => ({
  backgroundColor: alpha(
    theme.palette.primary.main,
    theme.palette.action.selectedOpacity
  ),
}));
// ----------------------------------------------------------------------

const ContainerStyled = styled("div", {
  shouldForwardProp: (prop) => prop !== "collapseClick",
})(({ theme }) => ({
  flexGrow: 1,
  minHeight: `100vh`,
  // paddingTop: HEADER.MOBILE_HEIGHT + 24,
  paddingTop: 24,
  paddingBottom: HEADER.MOBILE_HEIGHT + 24,
  paddingLeft: 16,
  paddingRight: 16,
  [theme.breakpoints.up("lg")]: {
    paddingLeft: 16,
    paddingRight: 16,
    // paddingTop: HEADER.DASHBOARD_DESKTOP_HEIGHT + 24,
    paddingBottom: HEADER.DASHBOARD_DESKTOP_HEIGHT + 24,
    transition: theme.transitions.create("margin-left", {
      duration: theme.transitions.duration.shorter,
    }),
    marginLeft: NAVBAR.DASHBOARD_COLLAPSE_WIDTH,
  },
}));

// ----------------------------------------------------------------------

const inter = Inter({ subsets: ["latin"] });
// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const lgpy = HEADER.DASHBOARD_DESKTOP_HEIGHT + 24;
  const [open, setOpen] = useState(false);
  return (
    <html lang="en" className="scroll-smooth">
      <body>
        <Providers>
          <MainStayled>
            <NavbarVertical
              isOpenSidebar={open}
              onCloseSidebar={() => setOpen(false)}
            />
            <ContainerStyled>{children}</ContainerStyled>
            <ToggleNavbar onOpenSidebar={() => setOpen(true)} />
          </MainStayled>
        </Providers>
      </body>
    </html>
  );
}
